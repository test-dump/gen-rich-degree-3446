If you are expecting to create unit tests for your `Hello World` console application in C#, you can follow the steps given below:

1. Create a new project in Visual Studio. To do this, click `File` -> `New` -> `Project`. From the new project dialog box, select `xUnit Test Project (.NET Core)`.

2. Your test project should come with a class called `UnitTest1.cs` which is a placeholder for your tests.

3. Rename your `UnitTest1.cs` to `ProgramTests.cs` (Right-click on the filename in the Solution Explorer, select `rename`, and type the new name).

4. Open `ProgramTests.cs` and replace the template code with the following code:

```csharp
using HelloWorld;  // The namespace of your hello world application
using Xunit;

namespace HelloWorldTests
{
    public class ProgramTests
    {
        [Fact]
        public void Test1()
        {
            var output = Program.GetHelloWorld();
            Assert.Equal("Hello World!", output);
        }
    }
}
```

5. You will realize that this test will fail because `Program.GetHelloWorld()` does not exist. To make the test pass, let's go back to your `Program.cs` and modify it like so:

```csharp
using System;

namespace HelloWorld
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(GetHelloWorld());
        }

        public static string GetHelloWorld()
        {
            return "Hello World!";
        }
    }
}
```

You could find and run your tests via `Test` -> `Run All Tests`.

This is a very basic example of unit testing in C#. In a larger, more complex project, you may have many different classes and methods that will need their own separate tests. The `Xunit` framework also supports a variety of other features, including the ability to create tests that require setup or teardown code, and the ability to create parameterized tests.